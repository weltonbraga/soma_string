        -:    0:Source:test/testa_string_soma.cpp
        -:    0:Graph:testa_string_soma.gcno
        -:    0:Data:testa_string_soma.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:/*! 
        -:    2: *  \brief     Trabalho 1 - MP
        -:    3: *  \details   Métodos de Programação - 201600
        -:    4: *  \author    Welton de Almeida Braga - 16/0148880
        -:    5: *  \date      20-09-2017
        -:    6: */
        -:    7:///includes
        -:    8:#include "gtest/gtest.h"
        -:    9:#include "string_soma.hpp"
        -:   10:
        -:   11:/**** Teste que não passa, não implementado
        -:   12:
        -:   13:Ao adicionar um novo delimitador
        -:   14:*/
       10:   15:TEST (TestaStringSoma_Necessario, UsadoDelimitadorIncorreto) {
        4:   16:	t_calc entrada;
        2:   17:	entrada.dado ="//[;]\n1;2\n";
        2:   18:	if( define_delimitador(entrada.dado) ) 
        2:   19:		if ( armazena_delimitador(entrada)) 
        2:   20:			ASSERT_FALSE( delimitador_incorreto(entrada) );
        -:   21:		
        -:   22:
        2:   23:	entrada.dado ="//[**]\n1**2\n**3**4\n";
        2:   24:	if( define_delimitador(entrada.dado) ) 
        2:   25:		if ( armazena_delimitador(entrada)) 
        2:   26:			ASSERT_FALSE( delimitador_incorreto(entrada) );
        -:   27:		
        2:   28:	entrada.dado ="1;2\n";
        2:   29:	if( define_delimitador(entrada.dado) ) 
    #####:   30:		if ( armazena_delimitador(entrada)) 
    #####:   31:			ASSERT_TRUE( delimitador_incorreto(entrada) );
        -:   32:}
        -:   33:
        -:   34:/// Verifica se é invalido quando entrada não termina em '\n'
       10:   35:TEST (TestaStringSoma_Necessario, TerminaComBarraN) {
        2:   36:	EXPECT_TRUE( ausencia_barra_n_final("1,\n2"));
        2:   37:	EXPECT_TRUE( ausencia_barra_n_final("1,\n\n\n\n0"));
        -:   38:
        2:   39:	EXPECT_FALSE( ausencia_barra_n_final("1,2\n\n\n"));
        2:   40:	EXPECT_FALSE( ausencia_barra_n_final("1\n\n,0\n"));
        2:   41:}
        -:   42:
        -:   43:
        -:   44:/*** Teste que não passa, não implementado
        -:   45:*
        -:   46:* Aceita entradas inválidas de numeros e letras misturadas
        -:   47:*
        -:   48:***/
        -:   49:
       10:   50:TEST (TestaStringSoma, ApenasNumeros) {
        -:   51:	char * entrada;
        -:   52:
        2:   53:	char dado_01[]="3,a\n";
        2:   54:	entrada = dado_01;
        2:   55:	EXPECT_EQ (INVALIDO, soma_string(entrada));
        -:   56:	
        2:   57:	char dado_02[]="b2,22c\n";
        2:   58:	entrada = dado_02;
        2:   59:	EXPECT_EQ (INVALIDO, soma_string(entrada));
        2:   60:}
        -:   61:/// numero no inicio ou no meio da string
       10:   62:TEST (TestaStringSoma_Proibido, NumNegativos) {
        2:   63:	EXPECT_TRUE( tem_numeros_negativos("-1,2,3") );
        2:   64:	EXPECT_TRUE( tem_numeros_negativos("1,\n\n2,3,-4\n") );
        -:   65:	
        2:   66:	EXPECT_FALSE( tem_numeros_negativos("1,2,3") );
        2:   67:	EXPECT_FALSE( tem_numeros_negativos("1,\n\n2,3\n4\n") );
        2:   68:}
        -:   69:
        -:   70:/// verifica espaços entre '\n' e no meio da string
       10:   71:TEST (TestaStringSoma_Proibido, EspacosEmBranco) {
        2:   72:	EXPECT_TRUE( tem_espacos_em_branco("1,2 \n") );
        2:   73:	EXPECT_TRUE( tem_espacos_em_branco("1 ,\n \n2,3,-4\n") );
        -:   74:	
        2:   75:	EXPECT_FALSE( tem_espacos_em_branco("1,2,3") );
        2:   76:	EXPECT_FALSE( tem_espacos_em_branco("1,\n\n2,3\n4\n") );
        2:   77:}
        -:   78:/// delimitadores separados por nenhum ou mais '\n'
       10:   79:TEST (TestaStringSoma_Proibido, tem_varios_delimitadores_entre_2_numeros) {
        4:   80:	t_calc entrada;
        2:   81:	entrada.dado = "1,,2\n";
        2:   82:	EXPECT_TRUE( tem_muitos_delimitadores_entre_numeros(entrada) );
        2:   83:	entrada.dado = "1,\n,\n2,3,4\n";
        2:   84:	EXPECT_TRUE( tem_muitos_delimitadores_entre_numeros(entrada) );
        -:   85:	
        2:   86:	entrada.dado = "1,2,3";
        2:   87:	EXPECT_FALSE( tem_muitos_delimitadores_entre_numeros(entrada) );
        2:   88:	entrada.dado = "1,\n\n2,3\n4\n";
        2:   89:	EXPECT_FALSE( tem_muitos_delimitadores_entre_numeros(entrada) );
        2:   90:}
        -:   91:/// verifica capitura de delimitador caso nao seja declarado novo delimitador
       10:   92:TEST (TestaStringSoma_PodeAcontecer, DefineDelimitadores) {
        2:   93:	EXPECT_TRUE( define_delimitador( "//[;]\n2;3\n" ) );
        -:   94:	
        2:   95:	EXPECT_FALSE( define_delimitador( "2***3***4\n" ) );
        2:   96:}
        -:   97:
        -:   98:/// verifica casos em que delimitadores novo são invalidos
       10:   99:TEST (TestaStringSoma_PodeAcontecer, ArmazenaNovosDelimitadores) {
        4:  100:	t_calc entrada;
        2:  101:	entrada.dado = "//[;]\n2;3\n" ;
        2:  102:	EXPECT_TRUE( armazena_delimitador( entrada ) );
        2:  103:	entrada.dado ="//[**][%%%]\n2**1%%%3\n";
        2:  104:	EXPECT_TRUE( armazena_delimitador( entrada ) );
        -:  105:	
        2:  106:	entrada.dado = "2***3***4\n"  ;
        2:  107:	EXPECT_FALSE( armazena_delimitador( entrada ) );
        2:  108:	entrada.dado = "//[***]2***3***4\n";
        2:  109:	EXPECT_FALSE( armazena_delimitador( entrada ) );
        2:  110:	entrada.dado = "//[]1;2\n";
        2:  111:	EXPECT_FALSE( armazena_delimitador( entrada ) );
        -:  112:
        -:  113:
        2:  114:}
        -:  115:
        -:  116:/// verifica se os delimitadores usados são conhecidos
       10:  117:TEST (TestaStringSoma_PodeAcontecer, delimitador_incorreto){
        4:  118:	t_calc entrada;
        2:  119:	entrada.dado = "1;2\n";
        2:  120:	EXPECT_TRUE( delimitador_incorreto( entrada ) );
        2:  121:	entrada.dado = "1,2\n";
        2:  122:	EXPECT_FALSE( delimitador_incorreto( entrada ) );
        2:  123:}
        -:  124:
        -:  125:
        -:  126:/// quantidade de numeros menor que 1 ou maior que 3
       10:  127:TEST (TestaStringSoma_Proibido, MaisDe3naLinha) {
        4:  128:	t_calc entrada;
        2:  129:	entrada.dado = "1,2,3,4\n";
        2:  130:	EXPECT_TRUE (mais_de_3_num_na_linha(entrada));
        -:  131:	
        2:  132:	entrada.dado = "1,2,3\n,4\n";
        2:  133:	EXPECT_FALSE (mais_de_3_num_na_linha(entrada));
        -:  134:
        2:  135:}
        -:  136:
        -:  137:/// verifica numeros separados por '\n' e delimitadores misturados
       10:  138:TEST (TestaStringSoma_Proibido, SemDelimitador) {
        -:  139:
        2:  140:	EXPECT_TRUE (sem_delimitador_entre_numeros("1,2\n3,4\n"));
        -:  141:	
        2:  142:	EXPECT_FALSE (sem_delimitador_entre_numeros("1,2,3\n,4\n"));
        -:  143:
        2:  144:}
        -:  145:
        -:  146:
        -:  147:/// Quando o teste acima passar quero que o resultado aqui seja correto
       10:  148:TEST (TestaStringSoma_calcular, ResultadoDaSoma) {
        -:  149:	char * entrada;
        -:  150:
        2:  151:	char dado_01[]=",\n";
        2:  152:	entrada = dado_01;
        2:  153:	EXPECT_EQ (INVALIDO, soma_string(entrada));
        -:  154:	
        2:  155:	char dado_02[]="1,2,3\n";
        2:  156:	entrada = dado_02;
        2:  157:	EXPECT_EQ (6 , soma_string(entrada));
        -:  158:	
        2:  159:	char dado_03[]="1,2,3";
        2:  160:	entrada = dado_03;
        2:  161:	EXPECT_EQ (INVALIDO , soma_string(entrada));
        2:  162:}
        -:  163:
        -:  164:/// quantidade de numeros menor que 1 ou maior que 3
       10:  165:TEST (TestaStringSoma, DeZeroAteTresNum) {
        -:  166:	char * entrada;
        -:  167:
        2:  168:	char dado_01[]="3\n";
        2:  169:	entrada = dado_01;
        2:  170:	EXPECT_EQ (3, soma_string(entrada));
        -:  171:	
        2:  172:	char dado_02[]="1,2,3,4\n";
        2:  173:	entrada = dado_02;
        2:  174:	EXPECT_EQ (INVALIDO, soma_string(entrada));
        -:  175:
        2:  176:}
        -:  177:
        -:  178:/// Proibido numeros negativos
       10:  179:TEST (TestaStringSoma, ProibidoNumNegativos) {
        -:  180:	char * entrada;
        -:  181:
        2:  182:	char dado_01[]="10,-7\n";
        2:  183:	entrada = dado_01;
        2:  184:	EXPECT_EQ (INVALIDO, soma_string(entrada));
        -:  185:	
        2:  186:	char dado_02[]="-1\n";
        2:  187:	entrada = dado_02;
        2:  188:	EXPECT_EQ (INVALIDO, soma_string(entrada));
        2:  189:}
        -:  190:
        -:  191:/// ignora numeros maiores que 1000
       10:  192:TEST (TestaStringSoma, IgnoraMaioresQue1000) {
        -:  193:	char * entrada;
        -:  194:
        2:  195:	char dado_01[]="3,2000\n";
        2:  196:	entrada = dado_01;
        2:  197:	EXPECT_EQ (3, soma_string(entrada));
        -:  198:	
        2:  199:	char dado_02[]="1001,1000\n";
        2:  200:	entrada = dado_02;
        2:  201:	EXPECT_EQ (1000, soma_string(entrada));
        2:  202:}
        -:  203:
        -:  204:/// espaco no meio da string
       10:  205:TEST (TestaStringSoma, Delimitador) {
        -:  206:	char * entrada;
        -:  207:
        2:  208:	char dado_01[]="5,6 \n";
        2:  209:	entrada = dado_01;
        2:  210:	EXPECT_EQ (INVALIDO, soma_string(entrada));
        -:  211:	
        2:  212:	char dado_02[]="7, 8\n";
        2:  213:	entrada = dado_02;
        2:  214:	EXPECT_EQ (INVALIDO, soma_string(entrada));
        -:  215:	
        2:  216:	char dado_03[]="1 ,2,3\n";
        2:  217:	entrada = dado_03;
        2:  218:	EXPECT_EQ (INVALIDO , soma_string(entrada));
        2:  219:}
        -:  220:/// numeros negativos em varias posições da strings
       10:  221:TEST (TestaStringSoma, PROIBIDO) {
        2:  222:	EXPECT_FALSE(tem_numeros_negativos("1,2,3\n4\n"));
        2:  223:	EXPECT_TRUE(tem_numeros_negativos("-1,2,-3\n4\n"));
        2:  224:	EXPECT_TRUE(tem_numeros_negativos("1,2,-3\n4\n"));
        2:  225:}
        -:  226:
        2:  227:int main(int argc, char **argv) {
        2:  228:  ::testing::InitGoogleTest(&argc, argv);
        2:  229:  return RUN_ALL_TESTS();
        6:  230:}
